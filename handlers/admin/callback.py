from aiogram import types
from aiogram.dispatcher import FSMContext
from loader import dp, db, bot, truncate
from filters.filters import IsAdmin
import keyboards.inline.keyboard as kb
import states.States as st

def get_fake_results(list_c: list[str], start_num: int, size: int = 50):
    overall_items = len(list_c)
    if start_num >= overall_items:
        return []
    elif start_num + size >= overall_items:
        return list_c[start_num:overall_items]
    else:
        return list_c[start_num:start_num + size]

@dp.callback_query_handler(IsAdmin(), text=["cancel_admin"], state="*")
async def cancel(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer('üìö –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.admin_keyboard())

@dp.inline_handler(IsAdmin(), text="obmen")
async def test(query: types.InlineQuery, state: FSMContext):
    get_history = await db.get_history()
    query_offset = int(query.offset) if query.offset else 0
    if not get_history:
        await query.answer([], cache_time=5, is_personal=True, switch_pm_parameter="admin", switch_pm_text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–æ–≤ –ø—É—Å—Ç!")
    articles = [types.InlineQueryResultArticle(
        id=value,
        title=f"–î–∞—Ç–∞ –æ–±–º–µ–Ω–∞ {item[4]}",
        description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {item[0]} | {item[3]} RUB ‚Äî> {item[2]} TRX",
        hide_url=False,
        input_message_content=types.InputTextMessageContent(
            message_text=f"""
üóì –î–∞—Ç–∞ –æ–±–º–µ–Ω–∞ <code>{item[4]}</code>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{item[0]}</code>
üì¨ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: <code>{item[1]}</code>
‚úÖ <code>{item[3]}</code> RUB ‚Äî> <code>{item[2]}</code> TRX
"""
        )
    ) for value, item in enumerate(get_fake_results(get_history, query_offset))]
    if len(articles) < 50:
        await query.answer(articles, is_personal=True, next_offset="", cache_time=5)
    else:
        await query.answer(articles, is_personal=True, next_offset=str(query_offset + 50), cache_time=5)

@dp.callback_query_handler(IsAdmin(), text="stats", state="*")
async def sss(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    a, b, c, d, e, f, g, h = await db.get_all_info()
    await call.message.answer(f"""<b>
~ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ @{(await bot.get_me()).username} ~

‚ôªÔ∏è –í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ: <code>{a}</code>
üìù –û–±–æ—Ä–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä—É–±–ª—è—Ö: <code>{truncate(b, 2)}</code>
üí∏ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞: <code>{truncate(c, 2)}</code>
1Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å: <code>{d}</code>
2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{e}</code>
3Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: <code>{f}</code>
üõ° –ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{g}</code>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{h}</code>
</b>""", reply_markup=kb.cancel_admin())

@dp.callback_query_handler(IsAdmin(), text="sender", state="*")
async def sss1(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    msg = await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=kb.cancel_admin())
    await state.update_data(msg=msg)
    await st.SenderAdmin.msg.set()

@dp.callback_query_handler(IsAdmin(), text="find_user", state="*")
async def sss2(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    msg = await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb.cancel_admin())
    await state.update_data(msg=msg)
    await st.GetUser.user_id.set()

@dp.callback_query_handler(IsAdmin(), text_contains="banned|", state="*")
async def sss3(call: types.CallbackQuery, state: FSMContext):
    data, user_id, status = call.data.split("|")
    await call.message.delete()
    await db.update_banned(user_id=user_id, banned=status)
    info = await db.get_user(user_id=user_id)
    status = {0: "‚ùå", 1: "‚úÖ"}
    count = await db.get_count(info.user_id)
    await call.message.answer(f"""<b>
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{info.username} (<code>{info.user_id}</code>)

üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{truncate(info.balance, 2)}</code>
üì¨ –ê–¥—Ä–µ—Å TRX: <code>{info.adress}</code>
‚ôªÔ∏è –°–æ–≤–µ—Ä—à–∏–ª –æ–±–º–µ–Ω–æ–≤: <code>{count}</code>
üìú –°–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: {status[info.accept]}
</b>""", reply_markup=kb.find_user(info.user_id, info.banned))

@dp.callback_query_handler(IsAdmin(), text_contains="chan_balance|", state="*")
async def sss4(call: types.CallbackQuery, state: FSMContext):
    user_id = call.data.split("|")[-1]
    await call.message.delete()
    msg = await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è\n–ü—Ä–∏–º–µ—Ä: -100 (—á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 100—Ä —Å –±–∞–ª–∞–Ω—Å–∞)", reply_markup=kb.cancel_admin())
    await state.update_data(msg=msg, user_id=user_id)
    await st.ChangeBalance.amount.set()
