from aiogram import types
from aiogram.dispatcher import FSMContext
import keyboards.inline.keyboard as kb_in
import states.States as stat
import loader
from loader import dp, db, bot, truncate
from data import config
from utils.misc.Trx import send_tron


@dp.callback_query_handler(text=["cancel", "cancel_n"], state="*")
async def cancel(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if call.data != "cancel_n":
        await call.message.delete()
    else:
        await call.message.edit_reply_markup(None)
    await call.message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {call.from_user.first_name}', reply_markup=kb_in.start())


@dp.callback_query_handler(text=["change"], state="*")
async def show_course(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    pars_ = await db.get_course()
    kurs = truncate(pars_ + pars_ * config.kurs / 100)
    await call.message.answer(f"""
–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:

Tron (TRX) - {kurs} —Ä—É–±
–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:""", reply_markup=kb_in.change_keyboard())


@dp.callback_query_handler(text=["buy_tron"], state="*")
async def request_trx_amount(call: types.CallbackQuery, state: FSMContext):
    info = await db.get_user(call.from_user.id)
    if not info.adress:
        await call.answer("‚ùóÔ∏è –ß—Ç–æ–±—ã –æ–±–º–µ–Ω—è—Ç—å TRX –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å—Å –≤ ¬´–ü—Ä–æ—Ñ–∏–ª–µ¬ª", show_alert=True)
        return
    await call.message.delete()
    pars_ = await db.get_course()
    kurs = truncate(pars_ + pars_ * config.kurs / 100)
    msg = await call.message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É TRX, –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏\n–ö—É—Ä—Å: {kurs} —Ä—É–±", reply_markup=kb_in.cancel())
    await state.update_data(msg=msg)
    await stat.GetTrx.amount.set()


@dp.callback_query_handler(text=["send_trx"], state="*")
async def process_trx_payment(call: types.CallbackQuery, state: FSMContext):
    msg = call.message.text.split("\n")
    adress = msg[2].split(": ")[-1]
    trx = int(msg[3].split(": ")[-1])
    rub = float(msg[4].split(": ")[-1])
    
    info = await db.get_user(call.from_user.id)
    if info.balance < rub:
        await call.answer("‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return
    await call.message.delete()
    await db.change_balance(user_id=call.from_user.id, amount=-rub)
    
    status = await send_tron(wallet=adress, amount=trx)
    if status["status"]:
        await db.insert_history(user_id=call.from_user.id, adress=adress, TRX=trx, RUB=rub)
        await call.message.answer(f'‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª {trx} TRX\nüîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: https://tronscan.org/#/transaction/{status["tx"]}', reply_markup=kb_in.cancel_n())
        await bot.send_message(chat_id=config.sender_id, text=f"@{call.from_user.username} ({call.from_user.id}) | {rub} RUB ‚Äî> {trx} TRX")
    else:
        await db.change_balance(user_id=call.from_user.id, amount=rub)
        await call.message.answer(f'‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!', reply_markup=kb_in.cancel_n())
        await bot.send_message(chat_id=config.sender_id, text=f"""
<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ TRX

Telegram ID: <code>{call.from_user.id}</code>
Telegram Username: <code>{call.from_user.username}</code>
–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{info.balance}</code>
–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{info.adress}</code>
–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <code>{trx}</code>
–û—à–∏–±–∫–∞: <code>{str(status['error'])}</code>
</b>""")


@dp.callback_query_handler(text=["information"], state="*")
async def show_information(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å", reply_markup=kb_in.create_information(config.links))


@dp.callback_query_handler(text=["profile"], state="*")
async def show_profile(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    info = await db.get_user(call.from_user.id)
    count = await db.get_count(call.from_user.id)
    await call.message.answer(f"""<b>
üíé –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:

üÜî ID: <code>{call.from_user.id}</code>
‚ö°Ô∏è Username: <code>{call.from_user.username}</code>
üí∏ –ë–∞–ª–∞–Ω—Å: <code>{truncate(info.balance, 2)}</code> —Ä—É–±
‚ôªÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: <code>{count}</code>
üì´ –ê–¥—Ä–µ—Å TRX: <code>{info.adress}</code></b>""", reply_markup=kb_in.profile())


@dp.callback_query_handler(text=["change_adres"], state="*")
async def request_new_address(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    msg = await call.message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å TRX –∫–æ—à–µ–ª—å–∫–∞:", reply_markup=kb_in.cancel())
    await state.update_data(msg=msg)
    await stat.ChangeTrx.adres.set()


@dp.callback_query_handler(text=["up_balance"], state="*")
async def choose_payment_system(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:", reply_markup=kb_in.choice_up(config.platega))


@dp.callback_query_handler(text_contains=["payment_generate|"], state="*")
async def generate_payment(call: types.CallbackQuery, state: FSMContext):
    payment = call.data.split("|")[-1]
    await state.update_data(payment=payment)
    await call.message.delete()
    msg = await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=kb_in.cancel())
    await state.update_data(msg=msg)
    await stat.UpdateBalance.amount.set()


@dp.callback_query_handler(text=["reject_qiwi"], state="*")
async def reject_qiwi_payment(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    bill_id = call.message.text.split("\n")[-1].replace("üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ", "")
    await loader.client_qiwi.reject_p2p_bill(bill_id=bill_id)
    await call.message.delete()
    await call.message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {call.from_user.first_name}', reply_markup=kb_in.start())


@dp.callback_query_handler(text=["check_pay|QIWI"], state="*")
async def check_qiwi_payment(call: types.CallbackQuery, state: FSMContext):
    msg = call.message.text.split("\n")
    amount = int(msg[1].replace("üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ", "").replace(" rub", ""))
    bill_id = msg[2].replace("üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ", "")
    status = await loader.client_qiwi.get_bill_status(bill_id=bill_id)
    if status == "PAID":
        await call.message.delete()
        await call.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω!")
        await call.message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω", reply_markup=kb_in.start())
        await db.change_balance(call.from_user.id, amount)
        await bot.send_message(chat_id=config.sender_id, text=f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ @{call.from_user.username} ({call.from_user.id}) | QIWI | +{amount} rub")
    else:
        await call.answer("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.callback_query_handler(text=["check_pay|CrystalPay"], state="*")
async def check_crystalpay_payment(call: types.CallbackQuery, state: FSMContext):
    msg = call.message.text.split("\n")
    amount = int(msg[1].replace("üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ", "").replace(" rub", ""))
    bill_id = msg[2].replace("üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ", "")
    status = await loader.client_cry.if_paid(id=bill_id)
    if status:
        await call.message.delete()
        await call.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω!")
        await call.message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω", reply_markup=kb_in.start())
        await db.change_balance(call.from_user.id, amount)
        await bot.send_message(chat_id=config.sender_id, text=f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ @{call.from_user.username} ({call.from_user.id}) | CrystalPay | +{amount} rub")
    else:
        await call.answer("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.callback_query_handler(text=["check_pay|YooMoney"], state="*")
async def check_yoomoney_payment(call: types.CallbackQuery, state: FSMContext):
    msg = call.message.text.split("\n")
    amount = float(msg[1].replace("üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ", "").replace(" rub", ""))
    bill_id = msg[2].replace("üÜî ID –ø–ª–∞—Ç–µ–∂–∞: ", "")
    payments = (await loader.client_ym.operation_history(label=bill_id, records=5)).operations[:5]
    for payment in payments:
        if payment.label == bill_id:
            amount = payment.amount
            await call.message.delete()
            await call.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω!")
            await call.message.answer("–ü–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω", reply_markup=kb_in.start())
            await db.change_balance(call.from_user.id, amount)
            await bot.send_message(chat_id=config.sender_id, text=f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ @{call.from_user.username} ({call.from_user.id}) | YooMoney | +{amount} rub")
            break
    else:
        await call.answer("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.callback_query_handler(text=["accept_rules"], state="*")
async def accept_rules(call: types.CallbackQuery, state: FSMContext):
    await db.change_accept(call.from_user.id)
    await call.message.delete()
    await call.message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {call.from_user.first_name}', reply_markup=kb_in.start())


@dp.callback_query_handler(text=["check_rules"], state="*")
async def check_rules(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("<b>"+config.rules+"</b>", reply_markup=kb_in.cancel())
